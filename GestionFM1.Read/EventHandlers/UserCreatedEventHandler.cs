
using GestionFM1.Read.QueryDataStore;
using System.Threading.Tasks;
using GestionFM1.Core.Models;
using Microsoft.EntityFrameworkCore;
using GestionFM1.Core.Interfaces;
using Microsoft.Extensions.Logging;
using GestionFM1.Core.Events; 

namespace GestionFM1.Read.EventHandlers;

public class UserCreatedEventHandler : IEventHandler<UserCreatedEvent>
{
    private readonly QueryDbContext _queryDbContext;
    private readonly ILogger<UserCreatedEventHandler> _logger;

    public UserCreatedEventHandler(QueryDbContext queryDbContext, ILogger<UserCreatedEventHandler> logger)
    {
        _queryDbContext = queryDbContext;
        _logger = logger;
    }

    public async Task Handle(UserCreatedEvent @event)
    {
        try
        {
            var user = new User
            {
                Id = @event.UserId, // Use the ID generated by Identity
                Email = @event.Email,
                Nom = @event.Nom,
                Prenom = @event.Prenom,
                UserName = @event.Email
            };

            _queryDbContext.Users.Add(user);
            await _queryDbContext.SaveChangesAsync();
            _logger.LogInformation($"Utilisateur ajouté à la base de données de lecture avec l'email : {@event.Email}");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Erreur lors du traitement de l'événement UserCreated pour l'utilisateur : {@event.Email}");
            throw; // Rethrow pour que RabbitMQ puisse gérer l'erreur
        }
    }
}